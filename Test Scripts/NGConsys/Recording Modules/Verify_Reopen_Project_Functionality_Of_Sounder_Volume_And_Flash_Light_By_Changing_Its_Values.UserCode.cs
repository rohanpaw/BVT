///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace TestProject.Recording_Modules
{
    public partial class Verify_Reopen_Project_Functionality_Of_Sounder_Volume_And_Flash_Light_By_Changing_Its_Values
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void VerifyDeviceModeAfterReopen(string sDeviceMode)
        {
			//Click on Points tab
			repo.ProfileConsys1.tab_Points.Click();
			
			// Click on SearchProperties text field
			repo.ProfileConsys1.txt_SearchProperties.Click();
			
			// Enter the Device text in Search Properties fields to view device related text
			repo.ProfileConsys1.txt_SearchProperties.PressKeys("Device" +"{ENTER}" );
			
			// Click on Device Mode cell
			repo.ProfileConsys1.PARTItemsPresenter.cell_DeviceMode.Click();
			
			// Get the text value of changed Device Mode field
			string DeviceMode = repo.FormMe.DeviceModeAfterReopen.TextValue;
			
			//Comparing expected and actual changed Device Mode value
			if(DeviceMode.Equals(sDeviceMode))
			{
				Report.Log(ReportLevel.Success,"Device mode " +DeviceMode+ " is displayed correctly");
			}
			else
			{
				Report.Log(ReportLevel.Failure,"Device mode is not displayed correctly");
			}
			
			//Click on Points tab
			repo.ProfileConsys1.tab_Points.Click();
			
			// Click on SearchProperties text field
			repo.ProfileConsys1.txt_SearchProperties.Click();
			
			// Select the text in SearchProperties text field and delete it
			Keyboard.Press("{LControlKey down}{Akey}{Delete}{LControlKey up}");
        }

        public void VerifyDeviceSensitivityAfterReopen(string sDeviceSensitivity)
        {
			// Click on Points tab
			repo.ProfileConsys1.tab_Points.Click();
				
			// Click on SearchProperties text field
			repo.ProfileConsys1.txt_SearchProperties.Click();
			
			// Enter the Device text in Search Properties fields to view device related text
			repo.ProfileConsys1.txt_SearchProperties.PressKeys("Device" +"{ENTER}");
			
			// Click on Device Sensitivity cell
			repo.ProfileConsys1.PARTItemsPresenter.cell_DeviceSensitivity.Click();
			
			// Get the text value of Device Sensitivity field
			string DeviceSensitivity = repo.FormMe.DeviceSensitivityAfterReopen.TextValue;
			
			//Comparing expected and actual Device Sensitivity value
			if(DeviceSensitivity.Equals(sDeviceSensitivity))
			{
				Report.Log(ReportLevel.Success,"Device Sensitivity " +DeviceSensitivity + " is displayed correctly");
			}
			else
			{
				Report.Log(ReportLevel.Failure,"Device Sensitivity is not displayed correctly");
			}
			
			//Click on Points tab
			repo.ProfileConsys1.tab_Points.Click();
			
			// Click on SearchProperties text field
			repo.ProfileConsys1.txt_SearchProperties.Click();
			
			// Select the text in SearchProperties text field and delete it
			Keyboard.Press("{LControlKey down}{Akey}{Delete}{LControlKey up}");
        }

    }
}
