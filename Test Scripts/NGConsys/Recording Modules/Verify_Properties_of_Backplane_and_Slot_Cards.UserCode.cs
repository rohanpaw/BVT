///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace TestProject.Recording_Modules
{
    public partial class Verify_Properties_of_Backplane_and_Slot_Cards
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void VerifyProductCodeInSearchProperties(string sProductLabel)
        {
			
			// Click on SearchProperties text field
			repo.ProfileConsys1.txt_SearchProperties.Click();
			
			// Search Label properties
			repo.ProfileConsys1.txt_SearchProperties.PressKeys("Product code" +"{ENTER}" );
			
			// Click on label cell
			repo.FormMe.cell_Properties_backplane.Click();
			
			// Retrieve value of label
			string actualProductLabel = repo.FormMe.txt_PropertiesTextValue.TextValue;
			
			// Comparing actualLabel and sLabel values
			if(actualProductLabel.Equals(sProductLabel))
			{
				Report.Log(ReportLevel.Success,"Actual SKU value " +actualProductLabel+ " is displayed correctly");
			}
			else
			{
				Report.Log(ReportLevel.Failure,"Actual SKU Value is displayed as "+actualProductLabel+ " instead of "+ sProductLabel);
			}
			
			// Click on SearchProperties text field
			repo.ProfileConsys1.txt_SearchProperties.Click();
			
			// Select the text in SearchProperties text field and delete it
			Keyboard.Press("{LControlKey down}{Akey}{Delete}{LControlKey up}");
        }

        public void editRegionName(string sNewLabel)
        {
			
			
			// Click on SearchProperties text field
			repo.ProfileConsys1.txt_SearchProperties.Click();
			
			// Search for the Label property
			repo.ProfileConsys1.txt_SearchProperties.PressKeys("Region Name" +"{ENTER}" );
			
			
				// Click on label cell
				repo.FormMe.cell_Properties_backplane.Click();
				
				//Modifying the label
				repo.FormMe.cell_Properties_backplane.PressKeys("{LControlKey down}{Akey}{Delete}{LControlKey up}");
				repo.FormMe.cell_Properties_backplane.PressKeys(sNewLabel +"{ENTER}" );
				Report.Log(ReportLevel.Success,"Label is edited to " +sNewLabel);
				
			
			
			// Click on SearchProperties text field
			repo.ProfileConsys1.txt_SearchProperties.Click();
			
			// Select the text in SearchProperties text field and delete it
			Keyboard.Press("{LControlKey down}{Akey}{Delete}{LControlKey up}");
        }

        public void VerifyProductInSearchProperties(string sProductName)
        {
			
			// Click on SearchProperties text field
			repo.ProfileConsys1.txt_SearchProperties.Click();
			
			// Search Label properties
			repo.ProfileConsys1.txt_SearchProperties.PressKeys("Product" +"{ENTER}" );
			
			// Click on label cell
			repo.FormMe.cell_Properties_backplane.Click();
			
			// Retrieve value of label
			string actualSKUValue = repo.FormMe.txt_PropertiesTextValue.TextValue;
			
			// Comparing actualLabel and sLabel values
			if(actualSKUValue.Equals(sProductName))
			{
				Report.Log(ReportLevel.Success,"Actual SKU value " +actualSKUValue+ " is displayed correctly");
			}
			else
			{
				Report.Log(ReportLevel.Failure,"Actual SKU Value is displayed as "+actualSKUValue+ " instead of "+ sProductName);
			}
			
			// Click on SearchProperties text field
			repo.ProfileConsys1.txt_SearchProperties.Click();
			
			// Select the text in SearchProperties text field and delete it
			Keyboard.Press("{LControlKey down}{Akey}{Delete}{LControlKey up}");
        }

        public void VerifyRegionNameInSearchProperties(string sRegionName)
        {
			
			// Click on SearchProperties text field
			repo.ProfileConsys1.txt_SearchProperties.Click();
			
			// Search Label properties
			repo.ProfileConsys1.txt_SearchProperties.PressKeys("Region Name" +"{ENTER}" );
			
			// Click on label cell
			repo.FormMe.cell_Properties_backplane.Click();
			
			// Retrieve value of label
			string actualRegionName = repo.FormMe.txt_PropertiesTextValue.TextValue;
			
			// Comparing actualLabel and sLabel values
			if(actualRegionName.Equals(sRegionName))
			{
				Report.Log(ReportLevel.Success,"Actual Region Name " +actualRegionName+ " is displayed correctly");
			}
			else
			{
				Report.Log(ReportLevel.Failure,"Actual Region Name is displayed as "+actualRegionName+ " instead of "+ sRegionName);
			}
			
			// Click on SearchProperties text field
			repo.ProfileConsys1.txt_SearchProperties.Click();
			
			// Select the text in SearchProperties text field and delete it
			Keyboard.Press("{LControlKey down}{Akey}{Delete}{LControlKey up}");
        }

    }
}
